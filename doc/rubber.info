This is rubber.info, produced by makeinfo version 4.8 from rubber.texi.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided also
that the sections entitled "Copying" and "GNU General Public License"
are included exactly as in the original, and provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by the Free Software Foundation.

   Copyright (C) 2002-2006 Emmanuel Beffara.

INFO-DIR-SECTION TeX
START-INFO-DIR-ENTRY
* Rubber: (rubber).   A building system for LaTeX documents.
END-INFO-DIR-ENTRY


File: rubber.info,  Node: Top,  Next: Introduction

Rubber
******

Rubber is a wrapper for LaTeX and companion programs. Its purpose is,
given a LaTeX source to process, to compile it enough times to resolve
all references, possibly running satellite programs such as BibTeX,
makeindex, Metapost, etc. to produce appropriate data files.

* Menu:

* Introduction::  Introduction.
* Invoking::      Syntax of the command lines.
* Directives::    Directives in LaTeX comments.
* Modules::       List of standard modules.
* Graphics::      Support for graphics conversion.
* Index::         Directive and modules index.


File: rubber.info,  Node: Introduction,  Next: Invoking,  Prev: Top,  Up: Top

1 Introduction
**************

The purpose of Rubber is to make the building of a document automated,
from the source files to the final document file, replacing the work of
a Makefile.

   The basis is a routine that compiles a LaTeX source the right number
of times to resolve all references and make all tables of contents,
list of figures, and so on. On top of that, Rubber provides a modular
system to handle various tasks needed apart from compilations. This,
for instance, includes processing bibliographic references or indices,
as well as compilation or conversion of figures. Additionally, modules
can perform a post-processing of the document (for instance to convert
a DVI to PostScript or PDF) or even a preprocessing (useful when the
LaTeX source is generated by another program, like cweave).

   Dependency analysis is performed by parsing the source files, so that
modifying any source, user package, graphics file or other dependency
leads to appropriate compilations. Modules are triggered either
explicitly using command line options, or implicitly when the sources
are parsed. For instance, BibTeX support is activated whenever the
source contains commands that generate a bibliography, graphics support
is activated by `\usepackage{graphics}' and similar commands, and so
on. The modular approach allows any additional feature to be supported
by simply writing a module to support it.

   Some information cannot be extracted from the LaTeX sources. This is
the case, for instance, with the search paths (which can be specified
in environment variables like `TEXINPUTS'), or the style to be used
with Makeindex. To address this problem, one can add information for
Rubber in the comments of the LaTeX sources, see *Note Directives::.

   The package comes with three different command line programs:

`rubber'
     Builds the specified documents completely. The source files may be
     either LaTeX sources or documents in a format Rubber knows how to
     translate into LaTeX.

`rubber-pipe'
     Does the same for one document but it reads the LaTeX source from
     standard input and dumps the compiled document on standard output.

`rubber-info'
     This is a utility for extracting various kinds of information from
     a LaTeX document, either from the source or from the compilation
     log files.


File: rubber.info,  Node: Invoking,  Next: rubber command line,  Prev: Introduction,  Up: Top

2 Command lines
***************

The command line of each program is read using the GNU Getopt
conventions.  `rubber' and `rubber-pipe' mostly have the same syntax.

* Menu:

* rubber command line::       Syntax for `rubber' and `rubber-pipe'.
* rubber-info command line::  Syntax for `rubber-info'.


File: rubber.info,  Node: rubber command line,  Next: rubber-info command line,  Prev: Invoking,  Up: Invoking

2.1 Syntax for `rubber' and `rubber-pipe'
=========================================

The syntax of the command lines for `rubber' and `rubber-pipe' are:

     rubber [options] files
     rubber-pipe [options]

The source files may be either LaTeX sources (in which case the suffix
`.tex' may be omitted) or documents in a format Rubber knows how to
translate into LaTeX (this currently means CWEB or Literate Haskell
documents). If any compilation fails, the whole process stops,
including the compilation of the next documents on the command line,
and the program returns a non-zero exit code.

   The options are the following:

`-b'
`--bzip2'
     Compress the final document (in `bzip2' format). This option is
     equivalent to saying `-o bzip2' after all other options. It is
     incompatible with the option `--gzip'.

`--cache'
     Use the experimental cache system. This uses a file `rubber.cache'
     in the current directory to store the results of parsing and
     dependency analysis, so that subsequent compilations are faster.

`--clean'
     Remove all files produced by the compilation, instead of building
     the document. This option is present in rubber only. It applies to
     the compilation as it would be done with the other options of the
     command line, i.e. saying
          rubber --clean foo
     will not delete foo.ps, while saying
          rubber --ps --clean foo
     will.

`-c <command>'
`--command <command>'
     Execute the specified command (or directive) _before_ parsing the
     source files. *Note Directives::.

`-e <command>'
`--epilogue <command>'
     Execute the specified command (or directive) _after_ parsing the
     source fiels. *Note Directives::.

`-f'
`--force'
     Force at least one compilation of the source. This may be useful,
     for instance, if some unusual dependency was modified (e.g. a
     package in a system directory). This option is irrelevant in
     rubber-pipe.

`-z'
`--gzip'
     Compress the final document (in `gzip' format). This option is
     equivalent to saying `-o gz' after all other options. It is
     incompatible with the option `--bzip2'.

`-h'
`--help'
     Display the list of all available options and exit nicely.

`--inplace'
     Go to the directory of the source files before compiling, so that
     compilation results are in the same place as their sources.

`--into <directory>'
     Go to the specified directory before compiling, so that all files
     are produced there and not in the current directory.

`--jobname <name>'
     Specify a job name different from the base file name.  This
     changes the name of output files and only applies to the first
     target.

`-k'
`--keep'
     This option is for `rubber-pipe' only. With this option, the
     temporary files will not be removed after compiling the document
     and dumping the results on standard output. The temporary document
     is named `rubtmpX.tex', where `X' is a number such that no file of
     that name exists initially.

`-l'
`--landscape'
     Specify that the final document should use landscape orientation.
     This is relevant only when using `dvips' or `dvipdfm'.

`-n <num>'
`--maxerr <num>'
     Set the maximum number of displayed errors. By default, up to 10
     errors are reported, saying `-n -1' displays all errors.

`-m <module>[:<args>]'
`--module <module>[:<args>]'
     Use the specified module in addition to the document's packages.
     Arguments can be passed to the package by adding them after a
     colon, they correspond to the package options in LaTeX. The module
     is loaded _before_ parsing the document's sources.

`--only <sources>'
     Compile the document partially, including only the specified
     sources. This works by inserting a call to `\includeonly' on the
     command line. The argument is a comma-separated list of file names.

`-o <module>[:<args>]'
`--post <module>[:<args>]'
     Used the specified module as a post-processor. This is similar to
     the `-m' options except that the module is loaded _after_ parsing
     the document.

`-d'
`--pdf'
     Produce PDF output. When this option comes after `--ps' (for
     instance in the form `-pd') it is  a  synonym  for `-o ps2pdf',
     otherwise it acts as `-m pdftex', in order to use pdfLaTeX instead
     of LaTeX.

`-p'
`--ps'
     Process the DVI produced by the process through `dvips' to produce
     a PostScript document. This option is a synonym for `-e module
     dvips', it cannot come after `--pdf'.

`-q'
`--quiet'
     Suppress all messages during the process.

`-r <file>'
`--read <file>'
     Read additional directives form the specified file (see also the
     directive `read').

`-S'
`--src-specials'
     Enable generation of source `\special's if the compiler supports
     it.  This is equivalent to setting the variable `src-specials' to
     `yes'.

`-s'
`--short'
     Display LaTeX's error messages in a compact form (one error per
     line).

`-I <dir>'
`--texpath <dir>'
     Add the specified directory to the search path of TeX files.

`--unsafe'
     Permit the document to invoke arbitrary external programs.  This
     is potentially dangerous, only use this option for documents
     coming from a trusted source.

`-v'
`--verbose'
     Increase the verbosity level. The default level is 0, levels up to
     3 exist.  Beware, saying `-vvv' makes Rubber speak a lot.

`--version'
     Print the version number and exit nicely.

`-W <type>'
`--warn <type>'
     Report warnings of the given type, if there was no compilation
     error. The available types are:
    `boxes'
          overfull and underfull boxes,

    `refs'
          undefined or multiply defined references,

    `misc'
          other warnings,

    `all'
          all of the above.


File: rubber.info,  Node: rubber-info command line,  Next: Directives,  Prev: rubber command line,  Up: Invoking

2.2 Syntax for `rubber-info'
============================

The command-line syntax for `rubber-info' is the following:

     rubber-info [options] [action] source

   The options are all those accepted by `rubber' and `rubber-pipe', as
described in *Note rubber command line::. The `action' specified what
kind of information has to be extracted. At most one such argument must
be present on the command line, `--check' is assumed if none is
present. The possible actions are:

`--boxes'
     Extracts from the log file the places in the source where bad
     boxes appeared (these are the famous overfull and underfull
     `\hbox' and `\vbox').

`--check'
     Report errors if there are any, otherwise report undefined
     references if there are any, otherwise list warnings and bad
     boxes. This is the default action.

`--deps'
     Analyse the source files and produce a space-separated list of all
     the files that the document depends on and that Rubber cannot
     rebuild.

`--errors'
     Extract from the log file the list of errors that occured during
     the last compilation.

`-h'
`--help'
     Display the list of all available options and exit nicely.

`--refs'
     Report the list of undefined or multiply defined references (i.e.
     the `\ref''s that are not defined by one `\label').

`--rules'
     Analyse the source files and produce a list of dependency rules.
     One rule is produced for each intermediate target that would be
     made when running `rubber'. Rules are formatted in the style of
     Makefiles.

`--version'
     Print the version number and exit nicely.

`--warnings'
     Stupidly enumerate all LaTeX warnings, i.e. all the lines in the
     log file that contain the string "Warning".


File: rubber.info,  Node: Directives,  Next: General directives,  Prev: rubber-info command line,  Up: Top

3 Directives
************

Some information cannot be extracted from the LaTeX sources. To address
this problem, one can add information for Rubber in the comments of the
LaTeX sources, in the form of directives. A directive is a line like

     % rubber: cmd args

The line must begin with a `%', then any sequence of `%' signs and
spaces, then the text `rubber:' followed by zero or more spaces and a
directive name, possibly followed by spaces and arguments.

   The argument in the directive line are separated by spaces, single
and double quotes allow escaping of spaces (and quotes). The directive
can contain variable references with the syntax `$VAR' or `${VAR}'. For
details on the use of variables, see *Note Variables::.

   If a directive name has the form `foo.bar', it is considered a
command `bar' for the module `foo'. If this module is not registered
when the directive is found, then the directive is silently ignored.
See the individual documentation for modules for module-specific
directives.

* Menu:

* General directives::
* Variables::


File: rubber.info,  Node: General directives,  Next: Variables,  Prev: Directives,  Up: Directives

3.1 General directives
======================

`alias <name1> <name2>'
     Pretend that the LaTeX macro `name1' is equivalent to `name2'. This
     can be useful when defining wrappers around supported macros, like:
          % rubber: alias ig includegraphics
          \newcommand\ig[1]{\includegraphics[scale=.5]{#1}}

`clean <file>'
     Indicates that the specified file should be removed when cleaning
     using `--clean'.

`depend <file>'
     Consider the specified file as a dependency, so that its
     modification time will be checked.

`make <file> [<options>]'
     Declare that the specified file has to be generated. Options can
     specify the way it should be produced, the available options are
     `from <file>' to specify the source and `with <rule>' to specify
     the conversion rule.  For instance, saying
          % rubber: make foo.pdf from foo.eps
     indicates that `foo.pdf' should be produced from `foo.eps', with
     any conversion rule that can do it.

`module <module> [<options>]'
     Loads the specified module, possibly with options. This is
     equivalent to the command-line option `--module'.

`onchange <file> <command>'
     Execute the specified shell command after compiling if the
     contents of the specified file have changed. The file name ends at
     the first space.

`paper <options>'
     Specify options related to paper size. Currently they are used to
     give `-t' options to `dvips' and `-p' options to `dvipdfm'.

`path <directory>'
     Adds the specified directory to the search path for TeX (and
     Rubber). The name of the directory is everything that follows the
     spaces after `path'.

`read <file>'
     Read the specified file of directives. The file must contain one
     directive per line. Empty lines and lines that begin with `%' are
     ignored.

`rules <file>'
     Read extra conversion rules from the specified file. The format of
     this file is the same as that of `rules.ini', see *Note
     rules.ini::.

`set <name> <value>'
     Set the value of a variable as a string. For details on the
     existing variables and their meaning, see *Note Variables::.

`setlist <name> <values>'
     Set the value of a variable as a list of strings. The list is
     space-separated, possibly empty. For details on the existing
     variables and their meaning, see *Note Variables::.

`shell_escape'
     Mark the document as requiring external programs (shell-escape or
     write18).  Rubber does not actually enable this unless called with
     the option `--unsafe'.

`watch <file>'
     Watch the specified file for changes. If the contents of this file
     has changed after a compilation, then another compilation is
     triggered. This is useful in the case of tables of contents, for
     instance.


File: rubber.info,  Node: Variables,  Next: Modules,  Prev: General directives,  Up: Directives

3.2 Variables
=============

The following variables are defined by Rubber (or its modules) and used
by various modules to influence compilation. All variables are strings
that should be defined by the `set' directive, unless explicitly
specified.

`arguments (list)'
     Extra command-line arguments that are passed to the compiler. Note
     that this is potentially dangerous and has no reason to be
     portable across different compilers. This variable contains a list
     of strings, it should be set using the `setlist' directive.

`base'
     The base name of the main source file, including its path but
     without the extension.

`engine'
     The name of the TeX engine used. By default this is `TeX', this
     can be changed to `VTeX', `pdfTeX', `Omega' or others by the
     modules that change the compiler, see *Note Compiler choice::.

`ext'
     The extension of the main source file.

`file'
     The name of the current file (this is set during parsing).

`job'
     The job name of the document, with no path indication.  Note that
     changing the value of this variable does not affect compilation; in
     order to actually change the job name, use the command line option
     `--jobname'.

`latex'
     Specify which program should be used for compiling. By default
     this is `latex', various modules can change it in order to use a
     different compiler instead, see *Note Compiler choice::.

`line'
     The current line number in the current file (this is set during
     parsing).

`paper'
     The paper size to use when compiling. This is used by
     post-processors like `dvips' or `dvipdfm'.

`path'
     The path name of the main output file.

`src-specials'
     The kind of source `\special's that should be generated. When empty
     (which is the case by default), no `\special's are generated. When
     set to `yes', the default set is generated, otherwise the variable
     is passed as the argument of the `-src-specials' switch of the
     compiler.

`target'
     The base name of the main output file, including its path but
     without the extension.


File: rubber.info,  Node: Modules,  Next: Packages,  Prev: Variables,  Up: Top

4 Modules
*********

* Menu:

* Packages::           Supported LaTeX packages.
* Pre-processing::     Files format that can be converted into LaTeX.
* Post-processing::    Post-processing the compiler's output.
* Compiler choice::    Choosing which LaTeX compiler to use.


File: rubber.info,  Node: Packages,  Next: BibTeX,  Prev: Modules,  Up: Modules

4.1 Supported Packages
======================

For every package that a document uses, Rubber looks for a module of
the same name to perform the tasks that this package my require apart
from the compilation by LaTeX. Modules can be added to the ones
provided by default to include new features (this is the point of the
module system). The standard modules are the following:

`beamer'
     This module handles Beamer's extra files the same way as other
     tables of contents.

`bibtex'
`multibib'
     Takes care of processing the document's bibliographies with BibTeX
     when needed. The `bibtex' module is automatically loaded if the
     document contains the macro `\bibliography'. For details, see
     *Note BibTeX::.

`combine'
     The combine package is used to gather several LaTeX documents into
     a single one, and this module handles the dependencies in this
     case.

`epsfig'
     This modules handles graphics inclusion for the documents that use
     the old style `\psfig' macro. It is actually an interface for the
     graphics system, for details see *Note Graphics::.

`graphics'
`graphicx'
     These modules identify the graphics included in the document and
     consider them as dependencies for compilation. They also use
     standard rules to build these files with external programs. For
     more details, see *Note Graphics::.

`hyperref'
     Handle the extra files that this package produces in some cases.

`index'
`makeidx'
`nomencl'
     Process the document's indexes with `makeindex' when needed. For
     details, see *Note Indexing::.

`minitoc'
`minitoc-hyper'
     On cleaning, remove additional files that produced to make partial
     tables of contents.

`moreverb'
`verbatim'
     Adds the files included with `\verbatiminput' and similar macros
     to the list of dependencies.

`natbib'
     May cause an extra compilation to solve references.

`xr'
     Add additional `.aux' files used for external references to the
     list of dependencies, so recompiling is automatic when refer-
     enced document are changed.

* Menu:

* BibTeX::      Details on BibTeX support.
* Indexing::    Details on Makeindex support.


File: rubber.info,  Node: BibTeX,  Next: Indexing,  Prev: Packages,  Up: Packages

4.1.1 BibTeX support
--------------------

If the document contains a call to `\bibliography' or
`\bibliographystyle', then the BibTeX module is used. This triggers the
execution of BibTeX between compilations when new references are made,
bibliographies are changed, and in other appropriate cases. The
following directives may be used to control BibTeX's behaviour:

`bibtex.crossrefs <number>'
     Set the minimum number of `crossref' required for automatic
     inclusion of the referenced entry in the citation list. This sets
     the option `-min-crossrefs' when calling `bibtex'.

`bibtex.path <directory>'
     Add the specified directory to the seach path for BibTeX database
     files (`.bib' files).

`bibtex.sorted <boolean>'
     If the argument is `true', `yes' or `1', declare that the
     bibliography is sorted (this is the default), otherwise declare
     that the citations appear in the same order as in the text. This
     may require additional calls to `bibtex'.

`bibtex.stylepath <directory>'
     Add the specified directory  to  the  search  path  for  BibTeX
     style files (`.bst' files).

   Multiple bibliographies can be handled by the `multibib' package. The
directives provided by the `multibib' module are the same as those of
the `bibtex' module, and they may be used with an optional first
arument of the form `(foo,bar,quux)' in order to specify that the
directive only applies to the bibliographies named `foo', `bar' and
`quux'. By default, directives are applied to all bibliographies.


File: rubber.info,  Node: Indexing,  Next: Pre-processing,  Prev: BibTeX,  Up: Packages

4.1.2 Index generation
----------------------

The use of the packages `index', `makeidx' and `nomencl' triggers the
generation of an index (or several of them). Currently Rubber can use
either the standard Makeindex or the more sophisticated Xindy. The
following directives may be used to control how indices are generated:

`index.tool <name>'
     Specifies which tool is to be used to process the index. The
     currently supported tools are `makeindex' (the default choice) and
     `xindy'.

`index.language <language>'
     Selects the language used for sorting the index. This only applies
     when using `xindy' as the indexing tool.

`index.modules <module>...'
     Specify which modules to use when processing an index with `xindy'.

`index.order <options>'
     Modifies the sorting options for the index. The argument must be a
     space-separated list of words among `standard', `german' and
     `letter'. his only applies when using `makeindex'.

`index.path <directory>'
     Adds the specified directory to the search path for index style
     files (`.ist' files).

`index.style <style>'
     Specifies the index style to be used.

   Each of these directives may be used with an optional first arument
of the form `(foo,bar,quux)' in order to specify that the directive
only applies to the indexes named `foo', `bar' and `quux'. By default,
directives are applied to all indices.

   When using the package `makeidx' instead of  `index', the directives
must of course be prefixed by `makeidx.' instead of `index.', and the
optional first argument is not accepted.


File: rubber.info,  Node: Pre-processing,  Next: Post-processing,  Prev: Indexing,  Up: Modules

4.2 Pre-processors
==================

The following modules are provided for using programs that generate a
LaTeX source from a different file format:

`cweb'
     This module's purpose is to run `cweave' if needed before the
     compiling process to produce the LaTeX source. This module is
     automatically loaded if the file specified on the command line has
     `.w' as its suffix.

`lhs2TeX'
     This module uses the `lhs2tex' preprocessor to generate the LaTeX
     source from a Literate Haskell program. It is automatically
     triggered if the input file's name ends with `.lhs'.


File: rubber.info,  Node: Post-processing,  Next: Dvips and Dvipdfm,  Prev: Pre-processing,  Up: Modules

4.3 Post-processors
===================

The following modules are provided to support different kinds of
post-processings. Note that the order matters when using these modules:
if you want to use a processing chain like

     foo.tex -> foo.dvi -> foo.ps -> foo.pdf -> foo.pdf.gz

you have to load the modules `dvips', `ps2pdf' and `gz' in that order,
for instance using the command line

     rubber -p -o ps2pdf -z foo.tex

`bzip2'
     Produce a version of the final document compressed with `bzip2'.

`dvipdfm'
     Runs `dvipdfm' at the end of compilation to produce a PDF document.

`dvips'
     Runs `dvips' at the end of compilation to produce a PostScript
     document. This module is also loaded by the command line option
     `--ps'.

`expand'
     Produce an expanded LaTeX source by replacing `\input' macros by
     included files, bibliography macros by the bibliography produced
     by `bibtex', and local classes and packages by their source. For
     details, see *Note Expand::.

`gz'
     Produce a version of the final document compressed with `gzip'.

`ps2pdf'
     Assuming that the compilation produces a PostScript document (for
     instance using module `dvips'), convert this document to PDF using
     `ps2pdf'.

* Menu:

* Dvips and Dvipdfm::    Details on DVI to PS/PDF conversion.
* Expand::               Details on the source expansion plugin.


File: rubber.info,  Node: Dvips and Dvipdfm,  Next: Expand,  Prev: Post-processing,  Up: Post-processing

4.3.1 Dvips and Dvipdfm
-----------------------

The `dvips' and `dvipdfm' modules can be used to call the associated
DVI drivers to produce PostScript or PDF documents from the DVI output
of LaTeX. The following directives may be used to change their
behaviour:

`paper <options>'
     Specify options related to paper size. Currently they are used to
     give `-t' options to `dvips' and `-p' options to `dvipdfm'. The
     command-line option `--landscape' is equivalent to the directive
     `paper landscape'.

`dvipdfm.options <options>'
`dvips.options <options>'
     Pass the specified options to the driver. The argument is a
     space-separated list of options that are passed before the DVI
     file's name.


File: rubber.info,  Node: Expand,  Next: Compiler choice,  Prev: Dvips and Dvipdfm,  Up: Post-processing

4.3.2 Source file expansion
---------------------------

The module `expand' produces a LaTeX source from the original one by
expanding included files and packages. If the main file is `foo.tex'
then then expanded file will be named `foo-final.tex'. This file will be
self-contained, in particular it will not need BibTeXing nor
user-defined packages, as may be required when preparing the final
version of a document for publication.

   As additional effect, this module removes all comments from the
source file (including those that may contain Rubber directives). It
also removes any text that may be present after `\end{document}'.

   Please note that this module is rather experimental.

The following options control how the expansion is done:

`class'
     If the document class is user-defined (i.e. if it is in a local
     directory instead of a system directory), the `\documentclass'
     call will be replaced by the code of the `.cls' file. Note that
     this is dangerous in general.

`nobib'
     Do not expand the bibliography. When this option is _not_ present,
     any call to `\bibiography' is discarded and the call to
     `\bibliographystyle' is replaced by the document's `.bbl' file.

`nopkg'
     Do not expand user-defined packages. When this option is _not_
     present, local packages (i.e. those that are in the current
     directory) are replaced by their contents.


File: rubber.info,  Node: Compiler choice,  Next: Graphics,  Prev: Expand,  Up: Modules

4.4 Changing compilers
======================

The following modules are used to change the LaTeX compiler:

`aleph'
     Use the Aleph compiler instead of TeX, i.e. compile with `lamed'
     instead of `latex'.

`etex'
     Instructs Rubber to use `elatex' instead of `latex'.

`omega'
     Use the Omega compiler instead of TeX, i.e. compiles the document
     using `lambda' instead of `latex'. If the module `dvips' is used
     too, it will use `odvips' to translate the DVI file. Note that
     this module is triggered automatically when the document uses the
     package `omega'.

`pdftex'
     Instructs Rubber to use `pdflatex' instead of `latex' to compile
     the document. By default, this produces a PDF file instead of a
     DVI, but when loading the module with the option `dvi' (for
     instance by saying `-m pdftex:dvi') the document is compiled into
     DVI using `pdflatex'.  This module is also loaded by the command
     line option `--pdf'.

`vtex'
     Instructs Rubber to use the VTeX compiler. By default this uses
     `vlatex' as the compiler to produce PDF output. With the option
     `ps' (e.g. when saying `rubber -m vtex:ps foo.tex') the compiler
     used is `vlatexp' and the result is a PostScript file.


File: rubber.info,  Node: Graphics,  Next: Conversion algorithm,  Prev: Compiler choice,  Up: Top

5 Graphics conversion
*********************

Rubber includes a system for automatic conversion of graphics (and other
files) between various file formats. This is used when graphics are
included using commands from the packages `graphicx', `graphics' or
`epsfig'.

   When a graphics inclusion macro like `\includegraphics' (even with
the parameters allowed by the `graphicx' package) or `\epsfig' is found
in a LaTeX source, Rubber looks for the corresponding file or a way to
generate it. If the call to the macro does not specify a file
extension, then the list of possible suffixes is tried (according to
the current compiler and the options passed to the graphics package).
For each possible file name, Rubber tries to find a good way to convert
this file from a source, and looks for the file itself. The precise
method is described in *Note Conversion algorithm::.

* Menu:

* Conversion algorithm::  How conversion rules are guessed.
* Standard rules::        List of standard conversion rules.
* rules.ini::             Syntax of rules.ini.


File: rubber.info,  Node: Conversion algorithm,  Next: Standard rules,  Prev: Graphics,  Up: Graphics

5.1 Conversion algorithm
========================

Files are converted using conversion rules, as described in *Note
Standard rules::, and each rule can take a number of formats as input
and produce a number of formats as output.

   Assume you are using `pdflatex' to compile a document that contains a
macro call `\includegraphics{foo}'. Since `pdftex' only accepts figures
in `png', `pdf' and `jpg' format, one of `foo.png', `foo.pdf' and
`foo.jpg' must be available. If the only available file around happens
to be `foo.gif', it has to be translated into one of these formats.
There are tools to convert `gif' files into just about any other
format, so we have to choose the proper conversion to perform.

   Hence all rules have a _cost_, an integer that represents how
unlikely a given conversion is. For instance the rule form `.fig' to
`.eps' files (for XFig support) has cost zero because it is almost
certain that this is the expected rule when the `.fig' file exists. On
the other hand, the rule from `.eps' to `.jpeg' has cost 11 because
this conversion is possible though usually not wanted.

   Now assume that a directory contains a LaTeX source that contains
`\includegraphics{foo}' and that both `foo.eps' and `foo.pdf' are
present, because we want to compile the document both to PostScript and
to PDF format. How can Rubber decide which figure is the source file
and which is converted from the other? By default, in this situation, no
conversion will ever be performed, since there is no way to decide.
Generally, a file will never be overwritten if the source could have
been produced by some conversion rule. This behaviour can be overridden
using the `make' directive, see *Note General directives::.

   To sum up, for each requested file, the detection algorithm works as
follows.  If relevant, take all possible suffixes (i.e. all accepted
file formats, if no format is specified in the source), and take all
possible directories where the file will be searched for by LaTeX. In
each case, you get a file name `foo'. If there is an applicable rule
with cost at most 0 to produce `foo', use that rule. Otherwise, if the
file `foo' exists, use it without conversion. Otherwise use the
applicable rule with the least cost. If all fails, proceed to the next
file name.

   The list of standard rules is defined in the file `rules.ini' in the
data directory. The syntax of this file is described in *Note
rules.ini::, the standard rules are described in *Note Standard
rules::. Additional rules can be defined in a file with the same format
and declared using the directive `rules'.

   The path searched for graphics files is the same as that for LaTeX
inputs by default. If the macro `\graphicspath' is used, the specified
paths are also searched, the same way as LaTeX does. Limited support is
also provided for the `\DeclareGraphicsExtensions' and
`\DeclareGraphicsRule' macros.


File: rubber.info,  Node: Standard rules,  Next: rules.ini,  Prev: Conversion algorithm,  Up: Graphics

5.2 Standard conversion rules
=============================

The following built-in rules are available:

`eps_gz'
     This rule is used to extract a bounding box from a gzipped EPS
     file, in order to be able to compile a document while keeping
     large figure files compressed.

`fig2dev'
     This is the exporting program that goes with XFig. It is used to
     convert files in `.fig' format into EPS, PDF or PNG. Rubber also
     supports the use of combined EPS/LaTeX of PDF/LaTeX, it is
     detected when an `\input' macro refers to a filename that ends in
     `.eps_t' or `.pstex_t'. When the suffix is `.eps_t' or `.pdf_t',
     the same document will compile both in PostScript and PDF.

`mpost'
     MetaPost has extra support in Rubber. If a graphics is included
     with a filename that ends with a dot and a decimal number like
     `foo.42', then it is considered to be generated from `foo.mp' if
     it exists. Dependency analysis is performed between MetaPost
     sources, so that recompilation always occurs when needed. If the
     compilation of a MetaPost source fails, the errors are reported as
     it would be done for LaTeX errors.

`shell'
     Other programs can be used using the `shell' rule. This rule takes
     an extra parameter `command', specified in the rule file, that
     defines a shell command-line. This is used for simple conversion
     rules using command-line tools like `convert' (from ImageMagick),
     `epstopdf', `jpeg2ps'.


File: rubber.info,  Node: rules.ini,  Next: Index,  Prev: Standard rules,  Up: Graphics

5.3 Syntax of `rules.ini'
=========================

The rules file has a format in the style of Wind*ws INI files. The
lines that start with a semicolon `;' are comments, empty lines are
ignored. The file is decomposed in sections, each introduced by a line
of the form

     [rule-name]

where `rule-name' is a unique identifier for the rule. Following this
header are lines of the form

     key = value

where `key' is an attribute name and `value' is its value, without any
quotes. The spaces around the value are stripped.

The following attributes are used:

`target'
     A regular expression that matches the target file name.

`source'
     A template that describes the source file name, with references to
     groups marked in the target expression as `\1', `\2' etc. This
     template may also contain choices of the form `{foo,bar,quux}' to
     denote several possibilities for the source name.

`rule'
     The name of the conversion rule. This name currently refers to
     internal modules of Rubber, as described in *Note Standard rules::.

`cost'
     The cost of the rule, as an integer. In the default file, this
     ranges between 0 and 12.


File: rubber.info,  Node: Index,  Next: Directive index,  Prev: rules.ini,  Up: Top

6 Index
*******

* Menu:

* Directive index::
* Module index::


File: rubber.info,  Node: Directive index,  Next: Module index,  Prev: Index,  Up: Index

6.1 Index of directives
=======================

 [index ]
* Menu:

* alias <name1> <name2>:                 General directives.   (line  6)
* bibtex.crossrefs <number>:             BibTeX.               (line 12)
* bibtex.path <directory>:               BibTeX.               (line 17)
* bibtex.sorted <boolean>:               BibTeX.               (line 21)
* bibtex.stylepath <directory>:          BibTeX.               (line 27)
* clean <file>:                          General directives.   (line 12)
* depend <file>:                         General directives.   (line 16)
* dvipdfm.options <options>:             Dvips and Dvipdfm.    (line 17)
* dvips.options <options>:               Dvips and Dvipdfm.    (line 18)
* index.language <language>:             Indexing.             (line 16)
* index.modules <module>...:             Indexing.             (line 20)
* index.order <options>:                 Indexing.             (line 23)
* index.path <directory>:                Indexing.             (line 28)
* index.style <style>:                   Indexing.             (line 32)
* index.tool <name>:                     Indexing.             (line 11)
* make <file> [<options>]:               General directives.   (line 20)
* module <module> [<options>]:           General directives.   (line 29)
* onchange <file> <command>:             General directives.   (line 33)
* paper <options> <1>:                   Dvips and Dvipdfm.    (line 11)
* paper <options>:                       General directives.   (line 38)
* path <directory>:                      General directives.   (line 42)
* read <file>:                           General directives.   (line 47)
* rules <file>:                          General directives.   (line 52)
* set <name> <value>:                    General directives.   (line 57)
* setlist <name> <values>:               General directives.   (line 61)
* shell_escape:                          General directives.   (line 66)
* watch <file>:                          General directives.   (line 71)


File: rubber.info,  Node: Module index,  Prev: Directive index,  Up: Index

6.2 Index of modules
====================

 [index ]
* Menu:

* aleph:                                 Compiler choice.      (line  8)
* beamer:                                Packages.             (line 12)
* bibtex:                                Packages.             (line 16)
* bzip2:                                 Post-processing.      (line 17)
* combine:                               Packages.             (line 23)
* cweb:                                  Pre-processing.       (line  9)
* dvipdfm:                               Post-processing.      (line 20)
* dvips:                                 Post-processing.      (line 23)
* epsfig:                                Packages.             (line 28)
* etex:                                  Compiler choice.      (line 12)
* expand:                                Post-processing.      (line 28)
* graphics:                              Packages.             (line 33)
* graphicx:                              Packages.             (line 34)
* gz:                                    Post-processing.      (line 34)
* hyperref:                              Packages.             (line 40)
* index:                                 Packages.             (line 43)
* lhs2TeX:                               Pre-processing.       (line 15)
* makeidx:                               Packages.             (line 44)
* minitoc:                               Packages.             (line 49)
* minitoc-hyper:                         Packages.             (line 50)
* moreverb:                              Packages.             (line 54)
* multibib:                              Packages.             (line 17)
* natbib:                                Packages.             (line 59)
* nomencl:                               Packages.             (line 45)
* omega:                                 Compiler choice.      (line 15)
* pdftex:                                Compiler choice.      (line 22)
* ps2pdf:                                Post-processing.      (line 37)
* verbatim:                              Packages.             (line 55)
* vtex:                                  Compiler choice.      (line 30)
* xr:                                    Packages.             (line 62)



Tag Table:
Node: Top1045
Node: Introduction1664
Node: Invoking4079
Node: rubber command line4477
Node: rubber-info command line10391
Node: Directives12253
Node: General directives13425
Node: Variables16328
Node: Modules18539
Node: Packages18894
Node: BibTeX21156
Node: Indexing22775
Node: Pre-processing24455
Node: Post-processing25151
Node: Dvips and Dvipdfm26642
Node: Expand27473
Node: Compiler choice28986
Node: Graphics30324
Node: Conversion algorithm31476
Node: Standard rules34486
Node: rules.ini36081
Node: Index37340
Node: Directive index37491
Node: Module index39625

End Tag Table
